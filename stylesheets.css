#ast-container span.name,
#ast-container span.identifier {
  color: #05a;
  margin-left: 4px;
}

#ast-container span.ctype
{
  margin-left: 4px;
	font-style: italic;
	color: green;
  white-space: nowrap;
}

#ast-container span.ctype::after,
#ast-container span.ctype::before {
	content: "'";
}

.tree-node,
.ast-node {
  padding-left: 10px;
  width: 100%;
}

/*
с этой поправкой все выглядит менее динамично

.tree-node {
  border-top: 1px solid rgba(0, 0, 0, 0);
  border-bottom: 1px solid rgba(0, 0, 0, 0);
}
.cst_high > .tree-node {
  border-top: none;
  border-bottom: none;
}
*/

.self {
  width: 100%;
  display: flex;
  align-items: center;
  /* max-width: max-content; */
}

.label {
  font: 12px "monospace";
  width: 100%;
  user-select: none;
}

.label:hover {
  cursor: pointer;
}

.arrow {
  margin-right: 3px;
  font-size: 75%;
}

.arrow:hover {
  cursor: pointer;
}

.arrow::after,
.arrow.visible::after {
  display: block;
  content: ' ';
  background-size: 10px 10px;
  height: 10px;
  width: 10px;
  line-height: 10px;
}

.arrow::after {
  background-image: url('/img/chevron-right.svg');
  padding-bottom: 1px;
}

.arrow.visible::after {
  background-image: url('/img/chevron-down.svg');
}

.arrow,
.label {
  display: inline;
}

#ast-container .label {
  display: inherit; /* don't know why it works */
}

#code-editor {
  width: 200px;
  height: 100%;
  box-sizing: border-box;
}

.CodeMirror {
  height: 100% !important;
}

html {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  overflow: hidden;
}

body {
  display: flex;
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  overflow: hidden;
}
#main {
  height: 400px;
  width: 400px;
  padding: 0;
  margin: 0;

  overflow: hidden;
}

#cst-container,
#ast-container {
  width: 400px;
  overflow-y: scroll !important;
  overflow-x: hidden;
  padding-top: 4px;
  padding-bottom: 8px;
  box-sizing: border-box;
  scrollbar-width: none !important;
  background-color: white;
}

#cst-container:hover {
  cursor: pointer;
}
.start-row-info,
.end-row-info,
.start-col-info,
.end-col-info {
  display: none;
}
.editor-highlight {
  background: rgba(200, 200, 70, 0.5);
}

.editor-highlight-first {
  border-top: 1px solid rgba(200, 200, 70, 0.8);
  background: rgba(200, 200, 70, 0.5);
}

.editor-highlight-last {
  border-bottom: 1px solid rgba(200, 200, 70, 0.8);
  background: rgba(200, 200, 70, 0.5);
}

.editor-highlight-range {
  background: rgba(200, 200, 70, 0.5);
}

.editor-highlight-error {
  border-top: 1px solid rgba(255, 70, 70, 0.8);
  border-bottom: 1px solid rgba(255, 70, 70, 0.8);
  background: rgba(255, 70, 70, 0.5);
}

.lex_high_first {
  border-top: 1px solid rgba(200, 200, 70, 0.8);
}

.lex_high_last {
  border-bottom: 1px solid rgba(200, 200, 70, 0.8);
}

.cst_high,
.highlighter
{
  border-top: 1px solid rgba(200, 200, 70, 0.8);
  border-bottom: 1px solid rgba(200, 200, 70, 0.8);
}

.cst_high,
.lex_high,
.highlighter {
  background: rgba(200, 200, 70, 0.4);
  width: 100%;
  overflow-x: hidden;
  box-sizing: border-box;
}

.cst_high:hover,
.lex_high:hover {
  cursor: pointer;
}

.children.hidden {
	display: none;
}

.token {
  font: 12px "monospace";
  display: flex;
  align-items: center;
  width: min-content;
}

.token img {
  padding-bottom: 1px;
}

#lex-container {
	padding-left: 8px;
	padding-top: 4px;
	width: 100%;
	height: 100%;
}

.label,
.lexem {
	display: inline;
}

.label {
	margin-right: 8px;
}

#cont {
	width: 800px;
	height: 600px;
}

.lexem {
	font-style: italic;
	color: green;
}

.lexem::before {
	content: "'";
}

.lexem::after {
	content: "'";
}

.keyword .label {
	color: #708;
}

.type .label {
	color: #170;
}

.identifier .label {
	color: #05a;
}

/* #cst-container .tree-node[data-type="nonterminal"] > .self > .label  {
  color: lightcyan;
}

#cst-container .tree-node[data-type="terminal"] > .self > .label  {
	color: yellow;
} */

/* #cst-container .tree-node > .self > .label  {
  font-weight: bold;
}
#cst-container .tree-node[data-nchildren="0"] > .self > .label  {
  font-weight: normal;
} */

.TOKEN_IDENTIFIER {
	color: #05a !important;
}

span.lexem {
  margin-left: 4px;
}

span.lexem::before,
span.lexem::after {
  content: "'";
}

.TOKEN_INT,
.TOKEN_RETURN,
.TOKEN_AUTO,
.TOKEN_BREAK,
.TOKEN_CASE,
.TOKEN_CHAR,
.TOKEN_CONST,
.TOKEN_CONTINUE,
.TOKEN_DEFAULT,
.TOKEN_DO,
.TOKEN_DOUBLE,
.TOKEN_ELSE,
.TOKEN_ENUM,
.TOKEN_EXTERN,
.TOKEN_FLOAT,
.TOKEN_FOR,
.TOKEN_GOTO,
.TOKEN_IF,
.TOKEN_INLINE,
.TOKEN_INT,
.TOKEN_LONG,
.TOKEN_REGISTER,
.TOKEN_RESTRICT,
.TOKEN_RETURN,
.TOKEN_SHORT,
.TOKEN_SIGNED,
.TOKEN_SIZEOF,
.TOKEN_STATIC,
.TOKEN_STRUCT,
.TOKEN_SWITCH,
.TOKEN_TYPEDEF,
.TOKEN_UNION,
.TOKEN_UNSIGNED,
.TOKEN_VOID,
.TOKEN_VOLATILE,
.TOKEN_WHILE,
.TOKEN_BOOL,
.TOKEN_COMPLEX,
.TOKEN_IMAGINARY
 {
	color: #708;
}

.error-message {
  border-top: 1px solid rgba(255, 70, 70, 0.8);
  background-color: white;
  font: 'Arial', sans-serif;
}

.error-message-title {
  font-weight: bold;
}
.CodeMirror-linenumber {
  min-width: 0;
}

.info-icon {
  display: none;
  width: 12px;
  height: 12px;
  padding-top: 1px;
}

.highlighter:hover .self:hover .info-icon:hover {
  cursor: pointer;
}

#ast-container .self .label {
  max-width: max-content;
}

.info-icon.hovered {
  cursor: pointer;
}

/*       TOOOOOOOOLTIP   */

.ast-node-tooltip {
  font: 12px/1.4 'Arial';
}

.ast-node-tooltip .head {
  border-bottom: 1px solid #ccc;
  padding: 5px 10px;
}

.ast-node-tooltip .body {
  padding: 5px 10px;
  max-height: 180px;
  overflow-y: scroll;
}

.ast-node-tooltip .kind {
  display: flex;
  justify-items: center;
}

.ast-node-tooltip .kind img {
  margin-right: 4px;
}

.tippy-box[data-theme~='custom'] {
  background-color: #eee;
  border-radius: 0;
  border: 1px solid #aaa;
  padding: 0;
  box-shadow: 0px 0px 16px 4px rgba(0, 0, 0, 0.2);
}

.tippy-content {
  padding: 0;
}

.ast-node-tooltip span.ctype2 {
	font-family: monospace;
	color: green;
  white-space: nowrap;
}

.ast-node-tooltip span.identifier {
	font-family: monospace;
}

.ast-node-tooltip span.keyword {
	font-family: monospace;
	color: #708;
}

#asm-container .highlighted {
  background: rgba(200, 200, 70, 0.4);
  width: 100%;
  overflow-x: hidden;
  box-sizing: border-box;
  border-top: 1px solid rgba(200, 200, 70, 0.8);
  border-bottom: 1px solid rgba(200, 200, 70, 0.8);
}

#asm-container {
  padding-top: 4px;
}

#asm-container pre {
  padding-left: 8px;
}

#asm-container pre:hover {
  cursor: pointer;
}

/* START BLUR */

/* #asm-container pre,
#lex-container > div {
  filter:brightness(0.5);
}

#asm-container pre.highlighted,
#lex-container .lex_high {
  filter: brightness(1) drop-shadow(0 0 2px yellow);
}

#ast-container .self,
#cst-container .self {
  filter: brightness(0.5);
}

#ast-container .highlighter,
#cst-container .cst_high {
  filter: drop-shadow(0 0 2px yellow);
}

#ast-container .highlighter .self,
#cst-container .cst_high .self {
  filter: brightness(1);
}

#code-editor .editor-highlight {
  filter: drop-shadow(0 0 2px yellow);
} */

/* END BLUR */
